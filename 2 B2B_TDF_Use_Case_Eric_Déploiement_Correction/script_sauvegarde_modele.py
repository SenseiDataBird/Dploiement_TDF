"""
Script de Sauvegarde des Mod√®les et Artefacts
√Ä ex√©cuter depuis le notebook de la Phase 2
"""

import joblib
import json
import os
import sys
from datetime import datetime

# Naviguer vers le dossier du notebook Phase 2
notebook_dir = "../../2. Modeling"
if os.path.exists(notebook_dir):
    os.chdir(notebook_dir)
    print(f"üìÇ R√©pertoire de travail : {os.getcwd()}\n")
else:
    print("‚ö†Ô∏è Assurez-vous d'ex√©cuter ce script depuis le dossier de d√©ploiement")

# V√©rifier que les variables existent
try:
    # Ces variables doivent exister dans le notebook de la Phase 2
    model_xgb
    onehot_encoder
    mae
    r2
    df_ml
except NameError as e:
    print(f"‚ùå Erreur : Variable manquante - {e}")
    print("\nüí° Ce script doit √™tre ex√©cut√© depuis le notebook Phase 2")
    print("   o√π les variables model_xgb, onehot_encoder, mae, r2 et df_ml sont d√©finies")
    sys.exit(1)

# Cr√©er le dossier modeles/ dans le dossier de d√©ploiement
modeles_dir = "../3. Deploiement/2 B2B_TDF_Use_Case_Eric_D√©ploiement_Correction/modeles"
os.makedirs(modeles_dir, exist_ok=True)

print("üîß Sauvegarde des mod√®les en cours...\n")

# 1. Sauvegarder le mod√®le XGBoost
model_path = os.path.join(modeles_dir, "xgboost_model.joblib")
joblib.dump(model_xgb, model_path)
print(f"‚úÖ Mod√®le XGBoost sauvegard√© : {model_path}")

# 2. Sauvegarder l'encodeur OneHot
encoder_path = os.path.join(modeles_dir, "onehot_encoder.joblib")
joblib.dump(onehot_encoder, encoder_path)
print(f"‚úÖ Encodeur OneHot sauvegard√© : {encoder_path}")

# 3. Sauvegarder les m√©tadonn√©es (simplifi√©es)
metadata = {
    'date_entrainement': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
    'mae': float(mae),
    'r2': float(r2),
    'features': ['phase', 'client', 'macro_produit', 'produit', 'mois_creation']
}

metadata_path = os.path.join(modeles_dir, "metadata.json")
with open(metadata_path, 'w', encoding='utf-8') as f:
    json.dump(metadata, f, indent=4, ensure_ascii=False)
print(f"‚úÖ M√©tadonn√©es sauvegard√©es : {metadata_path}")

print("\nüéâ Tous les artefacts ont √©t√© sauvegard√©s avec succ√®s!")
print("\nFichiers cr√©√©s :")
print(f"  - {model_path}")
print(f"  - {encoder_path}")
print(f"  - {metadata_path}")

