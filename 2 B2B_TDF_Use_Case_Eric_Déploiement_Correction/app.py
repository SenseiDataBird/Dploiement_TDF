"""
Application Streamlit - Pr√©diction des D√©lais d'Opportunit√©s TDF
Avec intervalle de confiance
"""

import streamlit as st
import joblib
import pandas as pd
import numpy as np
import json
from datetime import datetime
import os

# Configuration de la page
st.set_page_config(
    page_title="Pr√©diction D√©lais TDF",
    page_icon="üöÄ",
    layout="wide"
)

# Fonction de chargement des mod√®les (mise en cache)
@st.cache_resource
def charger_modeles():
    """Charge le mod√®le, l'encodeur et les m√©tadonn√©es"""
    try:
        model = joblib.load('modeles/xgboost_model.joblib')
        encoder = joblib.load('modeles/onehot_encoder.joblib')
        with open('modeles/metadata.json', 'r', encoding='utf-8') as f:
            metadata = json.load(f)
        return model, encoder, metadata
    except FileNotFoundError as e:
        st.error(f"‚ö†Ô∏è Fichiers mod√®les non trouv√©s : {e}")
        st.info("üí° Veuillez d'abord ex√©cuter le script 'script_sauvegarde_modele.py'")
        st.stop()

# Chargement des mod√®les
model, encoder, metadata = charger_modeles()

# En-t√™te de l'application
st.title("üöÄ Pr√©diction des D√©lais d'Opportunit√©s")
st.markdown("### Combien de jours avant de gagner cette opportunit√© ?")

st.divider()

# Affichage des informations du mod√®le
with st.expander("‚ÑπÔ∏è Informations sur le mod√®le"):
    col1, col2 = st.columns(2)
    with col1:
        st.metric("MAE (Erreur Moyenne)", f"{metadata['mae']:.1f} jours")
    with col2:
        st.metric("R¬≤ (Performance)", f"{metadata['r2']:.2%}")
    
    st.caption(f"Mod√®le entra√Æn√© le : {metadata['date_entrainement']}")

st.divider()

# Formulaire de pr√©diction
st.subheader("üìù Renseignez les Caract√©ristiques de l'Opportunit√©")

with st.form("prediction_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        phase = st.selectbox(
            "Phase du Projet",
            options=["Etude", "R√©alisation"],
            help="Phase actuelle du projet"
        )
        
        client = st.selectbox(
            "Client",
            options=["Client_1", "Client_2", "Client_3", "Client_4"],
            help="Identifiant du client"
        )
        
        macro_produit = st.selectbox(
            "Macro Produit",
            options=["Evolution PoP", "Nouveau PoP"],
            help="Type de produit global"
        )
    
    with col2:
        # Liste des produits
        liste_produits = [
            "Evol PoP Pyl FH/BLO",
            "Evol PoP Pyl Radio",
            "Evol PoP Pyl Radio 5G",
            "Evol PoP TT FH/BLO",
            "Nouv PoP PAC Rg 1",
            "Nouv PoP PAC Rg 1 ZB",
            "Nouv PoP PAC Rg suivant",
            "Nouv PoP Pyl FH",
            "Nouv PoP Pyl Radio"
        ]
        
        produit = st.selectbox(
            "Produit Sp√©cifique",
            options=liste_produits,
            help="Produit d√©taill√©"
        )
        
        mois_creation = st.slider(
            "Mois de Cr√©ation",
            min_value=1,
            max_value=12,
            value=datetime.now().month,
            help="Mois de cr√©ation de l'opportunit√© (1=Janvier, 12=D√©cembre)"
        )
    
    # Bouton de soumission
    submitted = st.form_submit_button("üîÆ Pr√©dire le D√©lai", use_container_width=True)

# Traitement de la pr√©diction
if submitted:
    st.divider()
    
    with st.spinner("Calcul de la pr√©diction en cours..."):
        # Pr√©paration des donn√©es
        data_input = pd.DataFrame({
            'phase': [phase],
            'client': [client],
            'macro_produit': [macro_produit],
            'produit': [produit]
        })
        
        # Encodage des variables cat√©gorielles
        encoded_features = encoder.transform(data_input)
        encoded_df = pd.DataFrame(
            encoded_features,
            columns=encoder.get_feature_names_out(['phase', 'client', 'macro_produit', 'produit'])
        )
        
        # Ajout du mois de cr√©ation
        encoded_df['mois_creation'] = mois_creation
        
        # R√©organiser les colonnes pour correspondre √† l'ordre attendu par le mod√®le
        # (Le mod√®le XGBoost est sensible √† l'ordre des colonnes)
        expected_columns = model.get_booster().feature_names
        
        # Cr√©er un DataFrame avec toutes les colonnes attendues, initialis√©es √† 0
        final_df = pd.DataFrame(0, index=[0], columns=expected_columns)
        
        # Remplir avec les valeurs encod√©es disponibles
        for col in encoded_df.columns:
            if col in final_df.columns:
                final_df[col] = encoded_df[col].values[0]
        
        # Pr√©diction ponctuelle
        prediction = model.predict(final_df)[0]
        prediction = max(0, prediction)  # √âviter les valeurs n√©gatives
        
        # Calcul de l'intervalle de confiance
        # On utilise la MAE comme estimation de l'incertitude (¬±1 √©cart-type)
        incertitude = metadata['mae']
        borne_inf = max(0, prediction - incertitude)
        borne_sup = prediction + incertitude
    
    # Affichage du r√©sultat
    st.success("‚úÖ Pr√©diction termin√©e !")
    
    # M√©trique principale avec intervalle de confiance
    col_metric1, col_metric2, col_metric3 = st.columns(3)
    
    with col_metric1:
        st.metric(
            label="‚è±Ô∏è D√©lai Pr√©dit",
            value=f"{prediction:.0f} jours"
        )
    
    with col_metric2:
        st.metric(
            label="üìâ Borne Inf√©rieure",
            value=f"{borne_inf:.0f} jours",
            delta=f"-{incertitude:.0f}j",
            delta_color="inverse"
        )
    
    with col_metric3:
        st.metric(
            label="üìà Borne Sup√©rieure",
            value=f"{borne_sup:.0f} jours",
            delta=f"+{incertitude:.0f}j"
        )
    
    # Intervalle de confiance en texte
    st.info(f"üìä **Intervalle de confiance (¬±1œÉ)** : entre **{borne_inf:.0f}** et **{borne_sup:.0f}** jours")
    
    # Code couleur et recommandation
    col1, col2 = st.columns(2)
    
    with col1:
        if prediction < 30:
            st.success("üü¢ **Opportunit√© RAPIDE**")
            st.write("Cette opportunit√© devrait se conclure rapidement.")
        elif prediction < 60:
            st.warning("üü† **Opportunit√© MOYENNE**")
            st.write("D√©lai standard, maintenir le suivi r√©gulier.")
        else:
            st.error("üî¥ **Opportunit√© LENTE**")
            st.write("Attention : Cette opportunit√© n√©cessite un suivi renforc√©.")
    
    with col2:
        # Informations sur la fiabilit√©
        st.write("**üéØ Fiabilit√© de la Pr√©diction**")
        st.write(f"‚Ä¢ Erreur moyenne du mod√®le : ¬±{metadata['mae']:.0f} jours")
        st.write(f"‚Ä¢ Pr√©cision du mod√®le : R¬≤ = {metadata['r2']:.1%}")
        
        if metadata['r2'] > 0.6:
            st.write("‚úÖ Confiance √©lev√©e")
        elif metadata['r2'] > 0.5:
            st.write("‚ö†Ô∏è Confiance moyenne")
        else:
            st.write("‚ö†Ô∏è Confiance faible")
    
    # D√©tails de la pr√©diction
    with st.expander("üìä D√©tails de la Pr√©diction"):
        st.write("**Caract√©ristiques saisies :**")
        details = {
            "Phase": phase,
            "Client": client,
            "Macro Produit": macro_produit,
            "Produit": produit,
            "Mois de Cr√©ation": f"{mois_creation} ({['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Ao√ª', 'Sep', 'Oct', 'Nov', 'D√©c'][mois_creation-1]})"
        }
        st.json(details)
        
        st.write("**M√©thode de calcul de l'intervalle :**")
        st.write(f"‚Ä¢ Pr√©diction centrale : {prediction:.1f} jours")
        st.write(f"‚Ä¢ Incertitude (MAE) : ¬±{incertitude:.1f} jours")
        st.write(f"‚Ä¢ Intervalle : [{borne_inf:.1f}, {borne_sup:.1f}] jours")

# Pied de page
st.divider()
st.caption("ü§ñ Application d√©velopp√©e avec Streamlit | Mod√®le : XGBoost Regressor")

